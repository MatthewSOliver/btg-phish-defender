
// This file is generated by Gemini. Do not edit it directly.
'use server';
/**
 * @fileOverview A Genkit flow for generating a list of emails (both phishing and safe).
 *
 * - generateEmails - A function that handles the email generation process.
 * - GenerateEmailsInput - The input type for the generateEmails function.
 * - GenerateEmailsOutput - The return type for the generateEmails function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const EmailSchema = z.object({
  sender: z.string().describe('The sender of the email.'),
  subject: z.string().describe('The subject line of the email.'),
  body: z.string().describe('The body content of the email.'),
  isPhishing: z.boolean().describe('Whether the email is a phishing attempt (true) or safe (false).'),
});

export type Email = z.infer<typeof EmailSchema>;

const GenerateEmailsInputSchema = z.object({
  numberOfEmails: z.number().describe('The number of emails to generate (both phishing and safe).'),
});
export type GenerateEmailsInput = z.infer<typeof GenerateEmailsInputSchema>;

const GenerateEmailsOutputSchema = z.array(EmailSchema);
export type GenerateEmailsOutput = z.infer<typeof GenerateEmailsOutputSchema>;

export async function generateEmails(input: GenerateEmailsInput): Promise<GenerateEmailsOutput> {
  return generateEmailsFlow(input);
}

const generateEmailsPrompt = ai.definePrompt({
  name: 'generateEmailsPrompt',
  input: {schema: GenerateEmailsInputSchema},
  output: {schema: GenerateEmailsOutputSchema},
  prompt: `You are an expert in creating subtle phishing emails and realistic safe emails for a security awareness game.

  Generate a list of emails in JSON format. The number of emails is determined by 'numberOfEmails'. Roughly half should be phishing, half should be safe.

  **Phishing Email Guidelines:**
  - **Avoid obvious sender names.** Do not use domains like 'badactor.com' or 'phishing.com'.
  - **Use subtle tactics for sender addresses:**
    - **Misspellings:** e.g., 'support@paypa1.com' instead of 'support@paypal.com'.
    - **Subdomain tricks:** e.g., 'login.microsoft.com@customdomain.com'.
    - **Slight variations of real domains:** e.g., '@google-support.net' instead of a real Google domain.
    - **Shortened or generic domains:** For a fake 'Daily Tea' newspaper, the phishing domain could be '@dt.com' or '@dailytea-news.com'.
  - **Body Content:** Incorporate common phishing markers like suspicious links, urgent requests, and generic greetings, but make them believable.
  - **Link Generation:** Instead of using placeholders like '[suspicious link removed]', generate realistic-looking hyperlinks. For phishing emails, use URL shorteners (like bit.ly, t.co), misspelled domains, or subdomains designed to deceive.

  **Safe Email Guidelines:**
  - **Create realistic sender identities.** Invent plausible company or service names (e.g., 'The Daily Tea' newspaper, 'QuickCart Online Store').
  - **Use legitimate-looking domains.** For an invented company 'The Daily Tea', the safe domain should be something like '@daily-tea.com' or '@dailyt.co'.
  - **Avoid using '@example.com'.**
  - **Body Content:** The content should appear legitimate, trustworthy, and relevant to the sender.
  - **Link Generation:** For safe emails, use clear and plausible URLs, like 'https://daily-tea.com/subscribe' or 'https://quickcart.com/orders/123'.

  Here's the number of emails to generate: {{{numberOfEmails}}}
  Ensure the output is a valid JSON array of email objects.
  `,
});

const generateEmailsFlow = ai.defineFlow(
  {
    name: 'generateEmailsFlow',
    inputSchema: GenerateEmailsInputSchema,
    outputSchema: GenerateEmailsOutputSchema,
  },
  async input => {
    const {output} = await generateEmailsPrompt(input);
    return output!;
  }
);
